FEATURES TO BE TESTED
Usability of the application
Test application access channel to other services, this involve testing is user is able to login and use other services (Login)
Priority :{ high}: This servers as a bridge between user and the service provided by the application, thus is important for the feature to work at all time. 
Test the application to respond to user interaction and response when input is imputed in the required field
Priority {High}: This feature is the core for other features as input to the feature is further processed to other applications 
Test system persistence based on user input, user inputs publication information, filling up required fields (Add publication)
Priority {High}: This feature inputs private data from the individual, data captured from this model needs to be secured and private to other research groups  

Search query response based on view publication module, testing search query output the desired resource (View Publication) 
Priority {High}: Feature involve retrieval of sensitive data entered by the user and need to be available ever time as user request, user can request to edit the data in the module
Editing of user profile, is the edit persisted and change in appropriate places in the application 
Priority {Medium}: Feature involves modification of user information with little impact to the overall system, thus not significant damage is done when the feature service can’t be reached 



FEATURES NOT TO BE TESTED
The System is divided in to modules, which consist of service contract, in the Android module of the system, the module is required to mimic the entire modules that make up the system, and the service contract of each module in the system will not be tested  
ITEM PASS/FAIL CRITERIA
Unit test of core modules making the application
 
Login: Test passed 
Add Publication: Test passed
View Publication: Test passed
Edit profile Test passed
SUSPENSION CRITERIA AND RESUMPTION REQUIREMENTS
Application testing reach a finite point, through lint report, the project included many errors and application running on the device kept on crushing because of these errors identified.
Implementation of the application is poorly implemented with no respect to android fragments usage, these resulted in many switches between different views in the application that puts a strain on the deployed device resources and replication, this resulted in some test not being able to be ran as switching between views lack reference path to which view to go to next, with the use of android fragments this could have being avoided.


